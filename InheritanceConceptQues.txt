   class BinaryTree:
    def __init__(self, root):
        self.key = root
        self.leftChild = None
        self.rightChild = None

    def insertLeft(self, newNode):
        if self.leftChild == None:
            self.leftChild = BinaryTree(newNode)
        else:
            t = BinaryTree(newNode)
            t.leftChild = self.leftChild
            self.leftChild = t

    def insertRight(self, newNode):
        if self.rightChild == None:
            self.rightChild = BinaryTree(newNode)
        else:
            t = BinaryTree(newNode)
            t.rightChild = self.rightChild
            self.rightChild = t
    
    def inOrder(self):
        if self.leftChild:
            self.leftChild.inOrder()
        print(self.key,end=" ")
        if self.rightChild:
            self.rightChild.inOrder()
    
    def preOrder(self):
        print(self.key,end=" ")
        if self.leftChild:
            self.leftChild.preOrder()
        if self.rightChild:
            self.rightChild.preOrder()
    
    def postOrder(self):
        if self.leftChild:
            self.leftChild.postOrder()
        if self.rightChild:
            self.rightChild.postOrder()
        print(self.key,end=" ")


class BST(BinaryTree):
    def __init__(self, root):
        super().__init__(root)

    def insert(self, newNode):
        if newNode < self.key:
            if self.leftChild:
                self.leftChild.insert(newNode)
            else:
                self.leftChild = BST(newNode)
        else:
            if self.rightChild:
                self.rightChild.insert(newNode)
            else:
                self.rightChild = BST(newNode)
    def search(self,Node):
        if Node<self.key:
            if self.leftChild:
                self.leftChild.search(Node)
            else:
                print("\nElemnt -",Node,"not found in tree")
        elif Node>self.key:
            if self.rightChild:
                self.rightChild.search(Node)
            else:
                print("\nElemnt -",Node,"not found in tree")
        else:
            if Node==self.key:
                print("\nElemnt -",Node,"found in tree")
        
            
        

def main():
    '''root = BinaryTree('a')
    root.insertLeft('b')
    root.insertRight('c')
    root.leftChild.insertLeft('d')
    root.leftChild.insertRight('e')
    root.rightChild.insertLeft('f')
    root.rightChild.insertRight('g')'''

    rootBST = BST('d')
    rootBST.insert('b')
    rootBST.insert('f')
    rootBST.insert('a')
    rootBST.insert('c')
    rootBST.insert('e')
    rootBST.insert('g')

    print('Inorder:')
    rootBST.inOrder()
    print('\nPreorder:')
    rootBST.preOrder()
    print('\nPostorder:')
    rootBST.postOrder()
    rootBST.search('a')
    rootBST.search('s')


if __name__ == '__main__':
    main()
